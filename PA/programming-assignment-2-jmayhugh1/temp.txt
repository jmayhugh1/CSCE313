#include <iostream>

#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#include <vector>
#include <string>

#include "Tokenizer.h"

// all the basic colours for a shell prompt
#define RED     "\033[1;31m"
#define GREEN	"\033[1;32m"
#define YELLOW  "\033[1;33m"
#define BLUE	"\033[1;34m"
#define WHITE	"\033[1;37m"
#define NC      "\033[0m"

using namespace std;

int main () {
            vector<int> ids;
            char cwd[2000];
            string curr_dirr = getcwd(cwd, sizeof(cwd));
            string prev_dirr = getcwd(cwd, sizeof(cwd));
            int original_stdin = dup(0);
            int orginal_stdout = dup(1); 
            


    for (;;) {
        // implement iteration over vector or background pid (vector also declared outside loop)
        // waitpid() - using flag for non-blocking
        // implement date/time with TODO
        // implement username with getlogin()
        // implement date/time eith getcwd()
        // need date/time, usernawe, and absolute path to current dir
        for (auto id : ids) {
            int status = 0;
            if (waitpid(id, &status, WNOHANG) == id) {
                cout << "Process " << id << " finished with status " << status << endl;
            }
        }
        // need date/time, username, and absolute path to current dir
        getcwd(cwd, sizeof(cwd));
        time_t curr_time = time(NULL);
        char *time = ctime(&curr_time);
        string str_time(time);
        // this removes the newline
        if (str_time.back() == '\n') {
            str_time.pop_back();
        }


        cout << YELLOW << "Shell$" << NC << "~" << NC << getenv("USER") << NC << "~" << NC << str_time << NC << "~" << NC << cwd << " ";
        
        // get user inputted command
        string input;
        getline(cin, input);

        if (input == "exit") {  // print exit message and break out of infinite loop
            cout << RED << "Now exiting shell..." << endl << "Goodbye" << NC << endl;
            break;
        }

        // chdir()
        // if dir (cd <dir>) is "-" then go to previous dir
        // variable storing previous directoriy (needs  to be declared outside the loop)

        // get tokenized commands from user input
        Tokenizer tknr(input);
        if (tknr.hasError()) {  // continue to next prompt if input had an error
            continue;
        }
        for (size_t i = 0; i < tknr.commands.size(); i++){
            int fd[2];  // File descriptor identifies each end of the pipe
            pipe(fd);    // Returns a pair of file descriptors
            bool hasinput = tknr.commands.at(i)->hasInput();
            bool hasoutput = tknr.commands.at(i)->hasOutput();
            
            

        }


        // print out every command token-by-token on individual lines
        // prints to cerr to avoid influencing autograder
        for (auto cmd : tknr.commands) {
            for (auto str : cmd->args) {
                cerr << "|" << str << "| ";
            }
            if (cmd->hasInput()) {
                cerr << "in< " << cmd->in_file << " ";
            }
            if (cmd->hasOutput()) {
                cerr << "out> " << cmd->out_file << " ";
            }
            cerr << endl;
        }

        // fork to create child
        pid_t pid = fork();
        if (pid < 0) {  // error check
            perror("fork");
            exit(2);
        }


        // add check for bg process - add pid to vector if bg and dont waitpid() in par
        if (pid == 0) {  // if child, exec to run command
            // run single commands with no arguments
            // implement multiple arguments
            char* args[] = {(char*) tknr.commands.at(0)->args.at(0).c_str(), nullptr};
            // if current command is redirected, then open file and dup2 std thats being redirected
            if (execvp(args[0], args) < 0) {  // error check
                perror("execvp");
                exit(2);
            }
        }
        else {  // if parent, wait for child to finish
            int status = 0;
            waitpid(pid, &status, 0);
            if (status > 1) {  // exit if child didn't exec properly
                exit(status);
            }
        }
    }
}
